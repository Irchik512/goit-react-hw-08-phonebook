{"version":3,"file":"static/js/531.fdd25d2f.chunk.js","mappings":"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","sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","views/LoginView/LoginView.jsx","views/RegisterView/RegisterView.styled.js","../node_modules/@chakra-ui/form-control/dist/chunk-RN6VKE3K.mjs"],"sourcesContent":["import styled from '@emotion/styled'\n\nexport const Section = styled.section`\n  width: 100%;\n  font-family: sans-serif;\n  padding: 30px 0;\n\n`;\n\nexport const Title = styled.h2`\n  font-size: 35px;\n`;\n","import PropTypes from 'prop-types';\nimport { Section, Title,} from 'components/Section/Section.styled';\n\nexport default function Sections({ title, children }) {\n  return (\n    <Section>\n      {title && <Title>{title}</Title>}\n      {children}\n    </Section>\n  );\n}\n\nSections.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Center, FormControl, Input, Button, FormLabel } from \"@chakra-ui/react\";\nimport { Form } from '../RegisterView/RegisterView.styled'\nimport { logIn } from 'redux/auth';\nimport Sections from 'components/Section/Section';\nexport default function LoginView() {\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      default:\n        return;\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(logIn({email, password})); \n  };\n  return(\n    <Sections title='Login form'>\n      <Center>\n        <Form onSubmit={handleSubmit}>\n        <FormControl isRequired>\n          <FormLabel>Email</FormLabel>\n            <Input name='email' type='email' placeholder='email' size='md'  onChange={handleChange}/>\n          <FormLabel>Password</FormLabel>\n            <Input name='password' type='password' placeholder='password' size='md' onChange={handleChange}/>\n          </FormControl>\n            <Button colorScheme='teal' variant='solid' type='submit' marginTop={'12px'}>\n              Submit\n            </Button>\n        </Form>\n      </Center>\n    </Sections>\n  )\n};","import styled from '@emotion/styled'\n\nexport const Form = styled.form`\n  width: 400px;\n  border: 2px solid #337088e8;\n  border-radius: 16px;\n  padding: 15px;\n \n  & input{\n    margin-bottom: 20px;\n    border-color: #337088e8;\n    &:hover{\n      border-color: #55b7c3;\n    };\n    &:focus{\n      background-color: #c1dbdbba;\n    };\n  };\n`;","import {\n  useFormControlContext,\n  useFormControlStyles\n} from \"./chunk-6ZNYZUDD.mjs\";\n\n// src/form-label.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar FormLabel = forwardRef(function FormLabel2(passedProps, ref) {\n  var _a;\n  const styles = useStyleConfig(\"FormLabel\", passedProps);\n  const props = omitThemingProps(passedProps);\n  const {\n    className,\n    children,\n    requiredIndicator = /* @__PURE__ */ jsx(RequiredIndicator, {}),\n    optionalIndicator = null,\n    ...rest\n  } = props;\n  const field = useFormControlContext();\n  const ownProps = (_a = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a : { ref, ...rest };\n  return /* @__PURE__ */ jsxs(\n    chakra.label,\n    {\n      ...ownProps,\n      className: cx(\"chakra-form__label\", props.className),\n      __css: {\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles\n      },\n      children: [\n        children,\n        (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator\n      ]\n    }\n  );\n});\nFormLabel.displayName = \"FormLabel\";\nvar RequiredIndicator = forwardRef(\n  function RequiredIndicator2(props, ref) {\n    const field = useFormControlContext();\n    const styles = useFormControlStyles();\n    if (!(field == null ? void 0 : field.isRequired))\n      return null;\n    const className = cx(\"chakra-form__required-indicator\", props.className);\n    return /* @__PURE__ */ jsx(\n      chakra.span,\n      {\n        ...field == null ? void 0 : field.getRequiredIndicatorProps(props, ref),\n        __css: styles.requiredIndicator,\n        className\n      }\n    );\n  }\n);\nRequiredIndicator.displayName = \"RequiredIndicator\";\n\nexport {\n  FormLabel,\n  RequiredIndicator\n};\n"],"names":["Section","styled","_templateObject","_taggedTemplateLiteral","Title","_templateObject2","Sections","_ref","title","children","_jsxs","_jsx","LoginView","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","handleChange","e","_e$currentTarget","currentTarget","name","value","Center","Form","onSubmit","preventDefault","logIn","FormControl","isRequired","FormLabel","Input","type","placeholder","size","onChange","Button","colorScheme","variant","marginTop","forwardRef","passedProps","ref","_a","styles","useStyleConfig","props","omitThemingProps","className","_props$requiredIndica","requiredIndicator","jsx","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","_objectWithoutProperties","_excluded","field","useFormControlContext","ownProps","getLabelProps","_objectSpread","jsxs","chakra","cx","__css","display","textAlign","displayName","useFormControlStyles","getRequiredIndicatorProps"],"sourceRoot":""}